// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: proto/calculator.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CalculatorSevice_Add_FullMethodName       = "/CalculatorSevice/Add"
	CalculatorSevice_Substract_FullMethodName = "/CalculatorSevice/Substract"
	CalculatorSevice_Multiple_FullMethodName  = "/CalculatorSevice/Multiple"
	CalculatorSevice_Divide_FullMethodName    = "/CalculatorSevice/Divide"
)

// CalculatorSeviceClient is the client API for CalculatorSevice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalculatorSeviceClient interface {
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
	Substract(ctx context.Context, in *SubstractRequest, opts ...grpc.CallOption) (*SubstractResponse, error)
	Multiple(ctx context.Context, in *MultipleRequest, opts ...grpc.CallOption) (*MultipleResponse, error)
	Divide(ctx context.Context, in *DivideRequest, opts ...grpc.CallOption) (*DivideResponse, error)
}

type calculatorSeviceClient struct {
	cc grpc.ClientConnInterface
}

func NewCalculatorSeviceClient(cc grpc.ClientConnInterface) CalculatorSeviceClient {
	return &calculatorSeviceClient{cc}
}

func (c *calculatorSeviceClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, CalculatorSevice_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorSeviceClient) Substract(ctx context.Context, in *SubstractRequest, opts ...grpc.CallOption) (*SubstractResponse, error) {
	out := new(SubstractResponse)
	err := c.cc.Invoke(ctx, CalculatorSevice_Substract_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorSeviceClient) Multiple(ctx context.Context, in *MultipleRequest, opts ...grpc.CallOption) (*MultipleResponse, error) {
	out := new(MultipleResponse)
	err := c.cc.Invoke(ctx, CalculatorSevice_Multiple_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorSeviceClient) Divide(ctx context.Context, in *DivideRequest, opts ...grpc.CallOption) (*DivideResponse, error) {
	out := new(DivideResponse)
	err := c.cc.Invoke(ctx, CalculatorSevice_Divide_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalculatorSeviceServer is the server API for CalculatorSevice service.
// All implementations must embed UnimplementedCalculatorSeviceServer
// for forward compatibility
type CalculatorSeviceServer interface {
	Add(context.Context, *AddRequest) (*AddResponse, error)
	Substract(context.Context, *SubstractRequest) (*SubstractResponse, error)
	Multiple(context.Context, *MultipleRequest) (*MultipleResponse, error)
	Divide(context.Context, *DivideRequest) (*DivideResponse, error)
	// mustEmbedUnimplementedCalculatorSeviceServer()
}

// UnimplementedCalculatorSeviceServer must be embedded to have forward compatible implementations.
type UnimplementedCalculatorSeviceServer struct {
}

func (UnimplementedCalculatorSeviceServer) Add(context.Context, *AddRequest) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedCalculatorSeviceServer) Substract(context.Context, *SubstractRequest) (*SubstractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Substract not implemented")
}
func (UnimplementedCalculatorSeviceServer) Multiple(context.Context, *MultipleRequest) (*MultipleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Multiple not implemented")
}
func (UnimplementedCalculatorSeviceServer) Divide(context.Context, *DivideRequest) (*DivideResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Divide not implemented")
}

// func (UnimplementedCalculatorSeviceServer) mustEmbedUnimplementedCalculatorSeviceServer() {}

// UnsafeCalculatorSeviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalculatorSeviceServer will
// result in compilation errors.
type UnsafeCalculatorSeviceServer interface {
	mustEmbedUnimplementedCalculatorSeviceServer()
}

func RegisterCalculatorSeviceServer(s grpc.ServiceRegistrar, srv CalculatorSeviceServer) {
	s.RegisterService(&CalculatorSevice_ServiceDesc, srv)
}

func _CalculatorSevice_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorSeviceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CalculatorSevice_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorSeviceServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculatorSevice_Substract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubstractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorSeviceServer).Substract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CalculatorSevice_Substract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorSeviceServer).Substract(ctx, req.(*SubstractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculatorSevice_Multiple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultipleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorSeviceServer).Multiple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CalculatorSevice_Multiple_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorSeviceServer).Multiple(ctx, req.(*MultipleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculatorSevice_Divide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DivideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorSeviceServer).Divide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CalculatorSevice_Divide_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorSeviceServer).Divide(ctx, req.(*DivideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CalculatorSevice_ServiceDesc is the grpc.ServiceDesc for CalculatorSevice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CalculatorSevice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CalculatorSevice",
	HandlerType: (*CalculatorSeviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _CalculatorSevice_Add_Handler,
		},
		{
			MethodName: "Substract",
			Handler:    _CalculatorSevice_Substract_Handler,
		},
		{
			MethodName: "Multiple",
			Handler:    _CalculatorSevice_Multiple_Handler,
		},
		{
			MethodName: "Divide",
			Handler:    _CalculatorSevice_Divide_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/calculator.proto",
}
